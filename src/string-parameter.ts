import { Arn, ArnFormat, ContextProvider, RemovalPolicy, Stack, TagManager, TagType, Tokenization } from "aws-cdk-lib";
import * as ssm from "aws-cdk-lib/aws-ssm";
import { IStringParameter } from "aws-cdk-lib/aws-ssm";
import * as cxschema from "aws-cdk-lib/cloud-assembly-schema";
import * as custom_resources from "aws-cdk-lib/custom-resources";
import { Construct } from "constructs";
import { ParameterBase, ParameterOptions } from "./parameter-base";
import { Validators } from "./validators";

/**
 * Properties needed to create a String SSM parameter.
 */
export interface StringParameterProps extends ParameterOptions {
  /**
   * The name of the parameter.
   *
   * It may not be a
   *
   * @default - a name will be generated by CloudFormation
   * @stability stable
   */
  readonly parameterName: string;

  /**
   * The region to create the parameter in. See AWS.SSM.region for more information.
   */
  readonly region: string;

  /**
   * The value of the parameter.
   *
   * It may not reference another parameter and ``{{}}`` cannot be used in the value.
   */
  readonly stringValue: string;

  /**
   * The data type of the parameter, such as `text` or `aws:ec2:image`.
   *
   * @default - undefined
   */
  readonly dataType?: ssm.ParameterDataType;

  /**
   * Whether to retain or delete the parameter on CloudFormation delete event.
   *
   * @default - DESTROY
   */
  readonly removalPolicy?: RemovalPolicy;
}

// Make parameterName optional for the attributes interface
export interface StringParameterAttributes extends Omit<ssm.StringParameterAttributes, "parameterName"> {
  /**
   * The region to retrieve the parameter from. See AWS.SSM.region for more information.
   */
  readonly region?: string;

  /**
   * The ARN of the parameter. Use this or parameterName, but not both.
   * If ARN is provided, region and account will be extracted from it.
   */
  readonly parameterArn?: string;

  /**
   * The name of the parameter store value if not using ARN.
   *
   * This value can be a token or a concrete string. If it is a concrete string
   * and includes "/" it must also be prefixed with a "/" (fully-qualified).
   */
  readonly parameterName?: string;
}

const RESOURCE_TYPE = "Custom::SSM_String_Parameter_Cross_Region";

export class StringParameter extends ParameterBase implements ssm.IStringParameter {
  /**
   * Imports an external string parameter with name and optional version.
   */
  public static fromStringParameterAttributes(
    scope: Construct,
    id: string,
    attrs: StringParameterAttributes
  ): ssm.IStringParameter {
    if (!attrs.parameterName && !attrs.parameterArn) {
      throw new Error("Either parameterName or parameterArn must be provided.");
    }
    if (attrs.parameterName && attrs.parameterArn) {
      throw new Error("Provide either parameterName or parameterArn, not both.");
    }

    let { parameterName, region, parameterArn } = attrs;

    if (parameterArn) {
      const arnParts = Arn.split(parameterArn, ArnFormat.SLASH_RESOURCE_NAME);
      if (!arnParts.resourceName) {
        throw new Error("Invalid Parameter ARN: missing resource name.");
      }
      parameterName = arnParts.resourceName;
      region = arnParts.region;
    } else if (!attrs.region) {
      throw new Error("region is required if parameterArn is not provided");
    }

    const parameterType = attrs.type ?? ssm.ParameterType.STRING;

    const versionedParameterName = attrs.version
      ? `${parameterName}:${Tokenization.stringifyNumber(attrs.version)}`
      : parameterName;

    const ssmNameParameter = parameterArn || versionedParameterName;

    class Import extends ParameterBase {
      public readonly parameterName: string;
      public readonly parameterArn: string;
      public readonly parameterType: ssm.ParameterType;
      public readonly stringValue: string;

      constructor() {
        super(scope, id);

        this.parameterArn =
          parameterArn ||
          Stack.of(this).formatArn({
            service: "ssm",
            resource: `parameter${versionedParameterName}`,
            region: region,
          });

        const parameter = new custom_resources.AwsCustomResource(this, "Resource", {
          resourceType: RESOURCE_TYPE,
          onCreate: {
            region: region,
            service: "SSM",
            action: "getParameter", // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SSM.html#getParameter-property
            parameters: {
              Name: ssmNameParameter,
            },
            physicalResourceId: custom_resources.PhysicalResourceId.of(this.parameterArn),
          },
          onUpdate: {
            region: region, // region is needed for the SDK call endpoint
            service: "SSM",
            action: "getParameter", // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SSM.html#getParameter-property
            parameters: {
              Name: ssmNameParameter,
            },
            physicalResourceId: custom_resources.PhysicalResourceId.of(this.parameterArn),
          },
          policy: custom_resources.AwsCustomResourcePolicy.fromSdkCalls({
            resources: custom_resources.AwsCustomResourcePolicy.ANY_RESOURCE,
          }),
        });

        this.parameterName = parameterName!; // parameterName is guaranteed to be defined here
        this.parameterType = parameterType;
        this.stringValue = parameter.getResponseField("Parameter.Value");
      }
    }

    return new Import();
  }

  /**
   * Imports an external string parameter by name and region.
   */
  public static fromStringParameterName(
    scope: Construct,
    id: string,
    region: string,
    parameterName: string
  ): IStringParameter {
    return this.fromStringParameterAttributes(scope, id, { parameterName: parameterName, region: region });
  }

  /**
   * Imports an external string parameter by ARN.
   */
  public static fromStringParameterArn(scope: Construct, id: string, arn: string): IStringParameter {
    return StringParameter.fromStringParameterAttributes(scope, id, {
      parameterArn: arn,
    });
  }

  /**
   * Reads the value of an SSM parameter during synthesis through an
   * environmental context provider.
   *
   * Requires that the stack this scope is defined in will have explicit
   * account information. Otherwise, it will fail during synthesis.
   */
  public static valueFromLookup(scope: Construct, region: string, parameterName: string): string {
    return ContextProvider.getValue(scope, {
      provider: cxschema.ContextProvider.SSM_PARAMETER_PROVIDER,
      props: { parameterName: parameterName, region: region },
      dummyValue: `dummy-value-for-${parameterName}`,
    }).value;
  }

  public readonly parameterArn: string;
  public readonly parameterName: string;
  public readonly parameterType: string;
  public readonly stringValue: string;

  readonly tags = new TagManager(TagType.KEY_VALUE, RESOURCE_TYPE);

  constructor(scope: Construct, id: string, props: StringParameterProps) {
    super(scope, id, {
      physicalName: props.parameterName,
    });

    if (props.allowedPattern) {
      Validators.parameterValue(props.stringValue, props.allowedPattern);
    }
    Validators.parameterName(props.parameterName);
    Validators.description(props.description);

    this.parameterArn = Stack.of(this).formatArn({
      service: "ssm",
      resource: `parameter${props.parameterName}`,
      region: props.region,
    });

    const removalPolicy = props.removalPolicy ?? RemovalPolicy.DESTROY;

    new custom_resources.AwsCustomResource(this, "Resource", {
      resourceType: RESOURCE_TYPE,
      onCreate: {
        region: props.region,
        service: "SSM",
        action: "putParameter", // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SSM.html#putParameter-property
        parameters: {
          Name: props.parameterName,
          Value: props.stringValue,
          AllowedPattern: props.allowedPattern,
          DataType: props.dataType,
          Description: props.description,
          Tags: this.tags.renderedTags,
          Tier: props.tier,
          Type: ssm.ParameterType.STRING,
        },
        physicalResourceId: custom_resources.PhysicalResourceId.of(this.parameterArn),
      },
      onUpdate: {
        region: props.region,
        service: "SSM",
        action: "putParameter", // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SSM.html#putParameter-property
        parameters: {
          Name: props.parameterName,
          Value: props.stringValue,
          AllowedPattern: props.allowedPattern,
          DataType: props.dataType,
          Description: props.description,
          Tags: this.tags.renderedTags,
          Tier: props.tier,
          Type: ssm.ParameterType.STRING,
          Overwrite: true,
        },
        physicalResourceId: custom_resources.PhysicalResourceId.of(this.parameterArn),
      },
      onDelete:
        removalPolicy != RemovalPolicy.RETAIN
          ? {
              region: props.region,
              service: "SSM",
              action: "deleteParameter", // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SSM.html#deleteParameter-property
              parameters: {
                Name: props.parameterName,
              },
              physicalResourceId: custom_resources.PhysicalResourceId.of(this.parameterArn),
            }
          : undefined,
      policy: custom_resources.AwsCustomResourcePolicy.fromSdkCalls({
        resources: custom_resources.AwsCustomResourcePolicy.ANY_RESOURCE,
      }),
    });

    this.parameterName = props.parameterName;
    this.parameterType = ssm.ParameterType.STRING;
    this.stringValue = props.stringValue;
  }
}
